#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

&sk { quick-release; };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <6 2>;
            then-layer = <5>;
        };
    };

    macros {
        mg_dot: mg_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(N7) &kp SPACE &sk LEFT_SHIFT>;
            label = "MG_DOT";
            wait-ms = <5>;
            tap-ms = <5>;
        };

        mg_comma: mg_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(N6) &kp SPACE>;
            label = "MG_COMMA";
            wait-ms = <5>;
            tap-ms = <5>;
        };

        mac_to_en: mac_to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LA(NUMBER_1))) &to 1>;
            label = "MAC_TO_EN";
            wait-ms = <5>;
            tap-ms = <5>;
        };

        mac_to_ru: mac_to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LA(NUMBER_2))) &to 0>;
            label = "MAC_TO_RU";
            wait-ms = <5>;
            tap-ms = <5>;
        };
    };

    behaviors {
        quest_excl: quest_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUEST_EXCL";
            bindings = <&kp RA(LS(SLASH))>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bracket_left: bracket_left {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKET_LEFT";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RA(LS(N6))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bracket_right: bracket_right {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACKET_RIGHT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp RA(LS(N7))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_right: comma_right {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_RIGHT";
            bindings = <&kp RC(N6)>, <&kp RA(L)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minus_down: minus_down {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_DOWN";
            bindings = <&kp MINUS>, <&kp RA(K)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        up_hash: up_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_HASH";
            bindings = <&kp HASH>, <&kp RA(I)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        equal_left: equal_left {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUAL_LEFT";
            bindings = <&kp EQUAL>, <&kp RA(J)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hrm_left: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 11 18 19 20 21 22 32 33 34 35>;
        };

        hrm_right: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 4 5 13 14 15 16 17 24 25 26 27 28 29 3>;
        };

        to_en_raise: to_en_raise {
            compatible = "zmk,behavior-hold-tap";
            label = "TO_EN_RAISE";
            bindings = <&mo>, <&mac_to_en>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
        };

        to_ru_raise: to_ru_raise {
            compatible = "zmk,behavior-hold-tap";
            label = "TO_RU_RAISE";
            bindings = <&mo>, <&mac_to_ru>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        mac_default_ru {
            bindings = <
&kp RA(H)                       &kp Q  &kp W  &kp E      &kp R            &kp T              &kp Y                  &kp U                &kp I             &kp O       &kp P        &kp LBKT
&mt LEFT_ALT GRAVE              &kp A  &kp S  &kp D      &hrm_left 3 F    &kp G              &kp H                  &hrm_right 4 J       &kp K             &kp L       &kp SEMI     &mt RIGHT_ALT SQT
&mt LEFT_CONTROL RIGHT_BRACKET  &kp Z  &kp X  &kp C      &kp V            &kp B              &kp N                  &kp M                &kp COMMA         &kp PERIOD  &quest_excl  &mt RIGHT_CONTROL RA(SLASH)
                                              &lt 2 TAB  &mt LSHFT SPACE  &mt LEFT_META RET  &mt RIGHT_META ESCAPE  &mt RSHFT BACKSPACE  &to_en_raise 2 0
            >;
        };

        mac_en {
            bindings = <
&kp DOLLAR                  &kp Q  &kp W  &kp E      &kp R            &kp T              &kp Y                  &kp U                &kp I             &kp O            &kp P             &kp LBKT
&mt LEFT_ALT AMPERSAND      &kp A  &kp S  &kp D      &hrm_left 3 F    &kp G              &kp H                  &hrm_right 4 J       &kp K             &kp L            &kp SINGLE_QUOTE  &mt RIGHT_ALT DOUBLE_QUOTES
&mt LEFT_CONTROL BACKSLASH  &kp Z  &kp X  &kp C      &kp V            &kp B              &kp N                  &kp M                &kp LEFT_BRACE    &kp RIGHT_BRACE  &quest_excl       &mt RIGHT_CONTROL RA(SLASH)
                                          &lt 2 TAB  &mt LSHFT SPACE  &mt LEFT_META RET  &mt RIGHT_META ESCAPE  &mt RSHFT BACKSPACE  &to_ru_raise 2 0
            >;
        };

        raise_layer {
            bindings = <
&mo 5               &kp KP_SLASH     &kp N7        &kp N8        &kp N9        &kp KP_MINUS  &kp C_VOL_UP  &kp HOME     &kp UP                &kp END    &kp C_PREVIOUS    &mo 5
&mt LEFT_ALT EQUAL  &kp KP_MULTIPLY  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp N0        &kp C_MUTE    &kp LEFT     &kp DOWN              &kp RIGHT  &kp C_PLAY_PAUSE  &mt RIGHT_ALT CAPSLOCK
&trans              &kp KP_DOT       &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_PLUS   &kp C_VOL_DN  &kp PAGE_UP  &kp LS(LG(NUMBER_3))  &kp PG_DN  &kp C_NEXT        &trans
                                                   &trans        &trans        &trans        &trans        &trans       &trans
            >;
        };

        symbol_right {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans             &mg_dot     &kp RA(N9)            &kp RA(N0)             &trans           &kp UNDERSCORE
&trans  &trans  &trans  &trans  &trans  &trans  &kp RA(SEMICOLON)  &kp RA(N7)  &bracket_left         &bracket_right         &kp ASTERISK     &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp N6             &kp N7      &kp RA(LEFT_BRACKET)  &kp RA(RIGHT_BRACKET)  &kp EXCLAMATION  &kp PIPE
                        &trans  &trans  &trans  &trans             &trans      &trans
            >;
        };

        symbol_left {
            bindings = <
&kp RA(H)          &kp RA(N)    &kp PERCENT        &up_hash       &mg_comma      &kp RA(F)              &trans  &trans  &trans  &trans  &trans  &trans
&trans             &kp PLUS     &equal_left        &minus_down    &comma_right   &kp RA(LS(SEMICOLON))  &trans  &trans  &trans  &trans  &trans  &trans
&kp RA(BACKSLASH)  &kp AT_SIGN  &kp RA(LS(MINUS))  &kp RA(MINUS)  &kp RA(GRAVE)  &kp RA(LS(GRAVE))      &trans  &trans  &trans  &trans  &trans  &trans
                                                   &trans         &trans         &trans                 &trans  &trans  &trans
            >;
        };

        settings {
            bindings = <
&trans      &none         &none         &none         &sys_reset    &bootloader   &bootloader   &sys_reset    &none         &none         &none         &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6        &kp F7        &kp F8        &kp F9        &kp F10       &kp F11       &kp F12
                                        &trans        &none         &trans        &none         &trans        &trans
            >;
        };
    };
};
